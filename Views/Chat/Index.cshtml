@using System.Linq
@model GPTCvAssistant.Models.ChatModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mazhar Hayat ‚Äì AI-Powered Career Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="~/content/css/chat.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://js.puter.com/v2/"></script>
</head>
<body>
    <button id="themeToggle" class="btn">üåô</button>

    <div class="chat-container">
        <div class="chat-header">
            <h1><i class="fas fa-briefcase"></i>Mazhar Hayat ‚Äì AI-Powered Career Profile</h1>
            <p class="text-muted">Ask anything about Mazhar Hayat's experience, skills, and projects ‚Äî delivered through an interactive AI assistant built for career insights.</p>
        </div>

        <!-- Alert container for messages -->
        <div id="alertContainer"></div>

        <div class="action-bar">
            <button id="clearBtn" type="button" class="btn btn-outline-danger btn-sm">
                <i class="fas fa-trash me-2"></i>Clear History
            </button>
            <button id="downloadBtn" type="button" class="btn btn-outline-primary btn-sm">
                <i class="fas fa-download me-2"></i>Download Transcript
            </button>

        </div>

        <div id="pinnedWrapper" class="chat-history mb-4" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="text-muted mb-0">üìå Pinned Answers</h6>
                @* <button class="btn btn-sm btn-outline-secondary" id="togglePinned">Toggle</button> *@
            </div>
            <div id="pinnedAnswers" class="pinned-container"></div>
        </div>


        <div id="searchWrapper" class="position-relative" style="display: none;">
            <input id="searchBox" class="form-control" type="text" placeholder="üîç Search past questions..." />
        </div>

        <div id="chatHistory" class="chat-history">
            @if (Model?.History != null && Model.History.Any())
            {
                @foreach (var item in Model.History)
                {
                    <div class="chat-entry">
                        <p><strong><i class="fas fa-user me-2"></i>You:</strong> @item.UserQuestion</p>
                        <p><strong><i class="fas fa-robot me-2"></i>Assistant:</strong></p>
                        <div class="response-html">@Html.Raw(item.Answer)</div>
                        <div class="d-flex justify-content-end mt-2">
                            <button class="btn btn-sm btn-outline-secondary btn-ask-again" data-question="@item.UserQuestion">
                                üîÅ
                            </button>

                            <button class="btn btn-sm btn-outline-success btn-pin-answer" style="margin-right:5px" data-index="@Model.History.IndexOf(item)">
                                üìå
                            </button>
                            <button class="btn btn-sm btn-outline-primary btn-copy-answer">
                                üìã
                            </button>
                        </div>

                    </div>
                }
            }
            else
            {
                <div class="text-center text-muted glass-effect">
                    <i class="fas fa-comments mb-3" style="opacity: 0.3;"></i>
                    <p class="mb-0">No chat history yet. Ask your first question!</p>
                </div>
            }
        </div>


        @if (Model?.SuggestedPrompts?.Any() == true)
        {
            <div class="glass-effect mb-3 px-3 py-2" style="margin:28px">
                <p class="mb-2 text-muted fw-semibold small">Suggested questions:</p>
                <div class="suggestion-scroll px-1">
                    @foreach (var prompt in Model.SuggestedPrompts)
                    {
                        <button class="btn btn-outline-primary btn-sm me-2 mb-1" onclick="submitPrompt('@prompt')">@prompt</button>
                    }
                </div>
            </div>

        }



        <div class="typing-indicator" id="typingIndicator">
            <i class="fas fa-robot me-2"></i>Activating knowledge module...
        </div>

        <div class="input-group w-100 flex-wrap">
            <input type="text" id="userQuestion" class="form-control" placeholder="Ask a question..." maxlength="500">
            <div id="smartSuggestions" class="dropdown-menu show mt-1" style="display: none;"></div>
            <button type="button" class="btn" id="voiceBtn"><i class="fas fa-microphone"></i></button>
            <button type="button" id="submitBtn" class="btn btn-submit"><i class="fas fa-paper-plane me-2"></i>Ask</button>
        </div>



    </div>

    <button id="scrollToBottom" class="btn btn-dark position-fixed" title="Scroll to bottom">
        ‚¨á
    </button>
    <!-- Toast notification -->

    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="toastAlert" class="toast align-items-center text-white bg-success border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-check-circle me-2"></i>Done ‚úÖ
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>

    <script>
        class ChatApp {
            constructor() {
                this.initializeEventListeners();
                this.loadTheme();
                this.addParticleEffect();
            }

            initializeEventListeners() {
                // Submit button click
                $('#submitBtn').click(() => this.submitQuestion());

                // Enter key press
                $('#userQuestion').keypress((e) => {
                    if (e.which === 13 && !e.shiftKey) {
                        e.preventDefault();
                        this.submitQuestion();
                    }
                });

                // Clear history button
                $('#clearBtn').click(() => this.clearHistory());

                // Download transcript button
                $('#downloadBtn').click(() => this.downloadTranscript());

                // Voice input button
                $('#voiceBtn').click(() => this.startVoiceRecognition());

                // Theme toggle button
                $('#themeToggle').click(() => this.toggleTheme());

                $('#searchBox').on('input', function () {
                        const query = $(this).val().toLowerCase();
                        $('.chat-entry').each(function () {
                        const text = $(this).text().toLowerCase();
                        $(this).toggle(text.includes(query));
                        });
                });
            }


            async submitQuestion() {
                const question = $('#userQuestion').val().trim();
                if (!question) {
                    this.showAlert('Please enter a question', 'warning');
                    return;
                }

                this.setLoading(true);

                try {
                    const response = await $.ajax({
                        url: '/Chat/Chat',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ userQuestion: question }),
                        dataType: 'json'
                    });

                    if (response.success) {
                        this.addChatEntry(response.exchange);
                        $('#userQuestion').val('');
                        this.scrollToBottom();
                    } else {
                        this.showAlert(response.message || 'Failed to get response', 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showAlert('Network error occurred. Please try again.', 'danger');
                } finally {
                    this.setLoading(false);
                }
            }

            async clearHistory() {
                if (!confirm('Are you sure you want to clear the chat history?')) {
                    return;
                }
                $('#searchWrapper').hide();
                try {
                    const response = await $.ajax({
                        url: '/Chat/ClearHistory',
                        type: 'POST',
                        dataType: 'json'
                    });

                    if (response.success) {
                        $('#chatHistory').html(`
                            <div class="text-center text-muted glass-effect" style="padding: 3rem; border-radius: 16px;">
                                <i class="fas fa-comments fa-3x mb-3" style="opacity: 0.3;"></i>
                                <p class="mb-0">No chat history yet. Ask your first question!</p>
                            </div>
                        `);
                        this.showToast('History cleared successfully!');
                    } else {
                        this.showAlert(response.message || 'Failed to clear history', 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showAlert('Network error occurred. Please try again.', 'danger');
                }
            }

            async downloadTranscript() {
                try {
                    // First check if there's any history
                    const checkResponse = await $.ajax({
                        url: '/Chat/GetHistory',
                        type: 'GET',
                        dataType: 'json'
                    });

                    if (!checkResponse.success || !checkResponse.history || checkResponse.history.length === 0) {
                        this.showAlert('No chat history to download', 'warning');
                        return;
                    }

                    // Create a temporary form to trigger file download
                    const form = $('<form method="POST" action="/Chat/DownloadTranscript"></form>');
                    $('body').append(form);
                    form.submit();
                    form.remove();

                    this.showToast('Transcript download started!');
                } catch (error) {
                    console.error('Error:', error);
                    this.showAlert('Failed to download transcript', 'danger');
                }
            }

            startVoiceRecognition() {
                if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                    this.showAlert('Speech recognition not supported in this browser', 'warning');
                    return;
                }

                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                const recognition = new SpeechRecognition();

                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'en-US';

                const voiceBtn = $('#voiceBtn');
                voiceBtn.prop('disabled', true).html('<i class="fas fa-microphone-slash"></i>');

                recognition.onresult = (event) => {
                    const transcript = event.results[0][0].transcript;
                    $('#userQuestion').val(transcript);
                };

                recognition.onerror = (event) => {
                    console.error('Speech recognition error:', event.error);
                    this.showAlert('Voice recognition failed. Please try again.', 'warning');
                };

                recognition.onend = () => {
                    voiceBtn.prop('disabled', false).html('<i class="fas fa-microphone"></i>');
                };

                recognition.start();
            }

            addChatEntry(exchange) {
                const historyContainer = $('#chatHistory');
                historyContainer.find('.text-center.text-muted').remove();

                const tone = this.getTone(exchange.answer);
                const toneClass = '' /* tone ? `tone-${tone}` : ''; */

                const entryHtml = `
                    <div class="chat-entry ${toneClass}">
                        <p><strong><i class="fas fa-user me-2"></i>You:</strong> ${this.escapeHtml(exchange.userQuestion)}</p>
                        <p><strong><i class="fas fa-robot me-2"></i>Assistant:</strong></p>
                        <div class="response-html">${exchange.answer}</div>
                    </div>
                `;
                historyContainer.append(entryHtml);
                this.scrollToBottom();
            }


            setLoading(isLoading) {
                const submitBtn = $('#submitBtn');
                const userQuestion = $('#userQuestion');
                const typingIndicator = $('#typingIndicator');

                if (isLoading) {
                    submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-2"></span>Thinking...');
                    userQuestion.prop('disabled', true);
                    typingIndicator.show();
                } else {
                    submitBtn.prop('disabled', false).html('<i class="fas fa-paper-plane me-2"></i>Ask');
                    userQuestion.prop('disabled', false);
                    typingIndicator.hide();
                }
            }

               scrollToBottom() {
                    const chatHistory = $('#chatHistory')[0];
                    chatHistory.scrollTo({
                        top: chatHistory.scrollHeight,
                        behavior: 'smooth'
                    });
                }


            showAlert(message, type = 'info') {
                const icons = {
                    'success': 'check-circle',
                    'danger': 'exclamation-triangle',
                    'warning': 'exclamation-circle',
                    'info': 'info-circle'
                };

                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        <i class="fas fa-${icons[type]} me-2"></i>${this.escapeHtml(message)}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;

                $('#alertContainer').html(alertHtml);

                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    $('.alert').alert('close');
                }, 5000);
            }

            showToast(message) {
                $('#toastAlert .toast-body').html(`<i class="fas fa-check-circle me-2"></i>${message}`);
                const toast = new bootstrap.Toast(document.getElementById('toastAlert'));
                toast.show();
            }

            toggleTheme() {
                const body = $('body');
                const toggle = $('#themeToggle');

                body.toggleClass('dark-mode');

                if (body.hasClass('dark-mode')) {
                    toggle.text('‚òÄÔ∏è');
                    localStorage.setItem('theme', 'dark');
                } else {
                    toggle.text('üåô');
                    localStorage.setItem('theme', 'light');
                }
            }

            loadTheme() {
                if (localStorage.getItem('theme') === 'dark') {
                    $('body').addClass('dark-mode');
                    $('#themeToggle').text('‚òÄÔ∏è');
                }
            }

            addParticleEffect() {
                // Add subtle floating particles for visual appeal
                for (let i = 0; i < 5; i++) {
                    const particle = $('<div class="particle"></div>');
                    particle.css({
                        position: 'fixed',
                        width: '4px',
                        height: '4px',
                        background: 'rgba(102, 126, 234, 0.3)',
                        borderRadius: '50%',
                        pointerEvents: 'none',
                        zIndex: '-1',
                        left: Math.random() * 100 + '%',
                        top: Math.random() * 100 + '%',
                        animation: `float ${3 + Math.random() * 4}s ease-in-out infinite`
                    });
                    $('body').append(particle);
                }
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
            getTone(text) {
                text = 'be careful';
                const lower = text.toLowerCase();
                if (/(great job|well done|impressive|amazing|excellent)/.test(lower)) return 'success';
                if (/(warning|note:|caution|be careful)/.test(lower)) return 'warning';
                if (/(suggest|recommend|tip|advice|consider)/.test(lower)) return 'info';
                if (/(sorry|cannot|failed|error|unfortunately)/.test(lower)) return 'danger';
                return null;
            }

        }

        // Initialize the app when the page loads
        $(document).ready(() => {
            new ChatApp();
            loadPinned();

         if ($('.chat-entry').length >= 9) {
            $('#searchWrapper').show();
         }

         if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
            $('#voiceBtn').hide(); // or $('#voiceBtn').addClass('d-none');
         }

         if ($('.chat-entry').length >= 9) {
            $('#searchWrapper').show();
         }

         const chatHistory = $('#chatHistory');

        chatHistory.on('scroll', function () {
            const nearBottom = chatHistory[0].scrollTop + chatHistory[0].clientHeight >= chatHistory[0].scrollHeight - 100;
            $('#scrollToBottom').toggle(!nearBottom);
        });


        });

        function submitPrompt(prompt) {
           $('#userQuestion').val(prompt).focus();
           $('#submitBtn').click();
        }

        $(document).on('click', '.btn-ask-again', function () {
            const question = $(this).data('question');
            $('#userQuestion').val(question).focus();
            $('#submitBtn').click();
        });

        let pinnedMap = new Map();

         function loadPinned() {
            const pinned = JSON.parse(localStorage.getItem('pinnedAnswers') || '[]');

            // ‚úÖ Fix: hide wrapper if there are no pins
            if (pinned.length === 0) {
                $('#pinnedWrapper').hide();  // this line fixes the issue
                return;
            }

            $('#pinnedWrapper').show();
            for (const entry of pinned) {
                renderPinned(entry.index, entry.question, entry.answer);
                pinnedMap.set(entry.index, true);
            }
        }



        function savePinned() {
            const data = Array.from(pinnedMap.entries()).map(([index, html]) => html);
            localStorage.setItem('pinnedAnswers', JSON.stringify(data));
        }

        function renderPinned(index, question, answer) {
            const html = `
                <div class="chat-entry" data-index="${index}">
                    <p><strong><i class="fas fa-user me-2"></i>You:</strong> ${$('<div>').text(question).html()}</p>
                    <p><strong><i class="fas fa-robot me-2"></i>Assistant:</strong></p>
                    <div class="response-html">${answer}</div>
                    <div class="d-flex justify-content-end mt-2">
                        <button class="btn btn-sm btn-outline-danger btn-unpin" data-index="${index}">‚ùå Unpin</button>
                    </div>
                </div>
            `;
            $('#pinnedAnswers').append(html);
        }

        $(document).on('click', '.btn-pin-answer', function () {
            const $btn = $(this);
            const entry = $btn.closest('.chat-entry');
            const index = $btn.data('index');
            const question = entry.find('p').eq(0).text().replace("You:", "").trim();
            const answer = entry.find('.response-html').html();

            if (pinnedMap.has(index)) return;

            pinnedMap.set(index, { index, question, answer });
            savePinned();
            renderPinned(index, question, answer);
            $('#pinnedWrapper').show();
            $btn.text('üìå Pinned').addClass('disabled');
        });

        $(document).on('click', '.btn-unpin', function () {
            const index = $(this).data('index');
            pinnedMap.delete(index);
            savePinned();
            $(`.chat-entry[data-index="${index}"]`).remove();
            if ($('#pinnedAnswers .chat-entry').length === 0) {
                $('#pinnedWrapper').hide();
            }
        });

         $('#togglePinned').click(function () {
            $('#pinnedWrapper').toggleClass('collapsed');

            const isCollapsed = $('#pinnedWrapper').hasClass('collapsed');
            $(this).text(isCollapsed ? 'Show' : 'Hide');
        });

         $(document).on('click', '.btn-copy-answer', function () {
            const rawHtml = $(this).closest('.chat-entry').find('.response-html').html();
            const plainText = $('<div>').html(rawHtml).text();

            navigator.clipboard.writeText(plainText).then(() => {
                const $btn = $(this);
                $btn.text('‚úÖ Copied!');
                setTimeout(() => $btn.text('üìã Copy'), 1500);
            }).catch(() => {
                alert("Failed to copy text. Please try again.");
            });
        });

        const chatHistory = $('#chatHistory');

        chatHistory.on('scroll', function () {
            const nearBottom = chatHistory[0].scrollTop + chatHistory[0].clientHeight >= chatHistory[0].scrollHeight - 100;
            $('#scrollToBottom').toggle(!nearBottom);
        });

         $('#scrollToBottom').click(function () {
            chatHistory[0].scrollTo({
                top: chatHistory[0].scrollHeight,
                behavior: 'smooth'
            });
        });




    </script>

</body>
</html>